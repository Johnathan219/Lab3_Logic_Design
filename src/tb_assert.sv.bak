`timescale 1ps/1ps

module tb_assert;

 // Inputs
  reg CLOCK_50;
  reg SW;
  reg [2:0] KEY;

  // Outputs
  logic [2:0] LEDR;
  logic [23:0] i_data;
  logic [5:0] fifolen;
  
  // Instantiate the module under test
  top_lab3 dut (
    .CLOCK_50(CLOCK_50),
    .SW(SW),
    .KEY(KEY),
	 .data_in(i_data),
	 .fifolen(fifolen),
    .LEDR(LEDR)
  );
  
 
  logic [4:0] wraddr;
  logic [4:0] rdaddr;
  logic [4:0] rd_ptr;
  logic [4:0] wr_ptr;
  logic [23:0] o_data;
  logic o_empty;
  logic o_full;
  logic rd_en;
  logic wr_en;
  logic i_clk;
  logic i_rst_n;
  
  assign wraddr = dut.wraddr;
  assign rdaddr = dut.rdaddr;
  assign empty = dut.empty;
  assign i_clk = CLOCK_50;
  assign i_rst_n = KEY[2];
  
  assign wr_ptr = wraddr;
  assign rd_ptr = rdaddr;
  
  assign o_data = dut.data_out;
  

	assign o_empty = dut.empty;
	assign o_full = dut.fifofull;
	assign rd_en = dut.read;
	assign wr_en = dut.write;

// Test case 1
  // Clock generation
  property async_rst_startup;
	@(posedge i_clk) !i_rst_n |-> ##1 (wraddr==0 && rdaddr == 0 && o_empty); // in one cycle if there is the rst signal, all wraddr, raddr, and empty will execute
	endproperty
 	assert property (async_rst_startup);
	
 // rst check in general
  property async_rst_chk;
	@(negedge i_rst_n) 1'b1 |-> ##1 @(posedge i_clk) (wraddr==0 && rdaddr == 0 && o_empty);
	endproperty
	assert property (async_rst_chk);
	
 Test case 2
sequence rd_detect(ptr);
 ##[0:$] (rd_en && !o_empty && (rd_ptr == ptr));
 endsequence
 
 property data_wr_rd_chk(wrPtr);
 // local variable
 integer ptr, data;
 @(posedge i_clk) disable iff(!i_rst_n)
 (wr_en && !o_full, ptr = wrPtr, data = i_data, $display ($time, "wr_ptr=%h, i_fifo=%h",wr_ptr, i_data)) |-> ##1 first_match(rd_detect(ptr), $display ($time, " rd_ptr=%h,o_fifo=%h",rd_ptr, o_data)) ##0 o_data == data;
 endproperty
	assert property (data_wr_rd_chk(wr_ptr));
	
// Test case 3
property dont_write_if_full;
 // @(posedge i_clk) disable iff(!i_rst_n) o_full |-> ##1 $stable(wr_ptr);
 // alternative way of writing the same assertion
 @(posedge i_clk) disable iff(!i_rst_n) wr_en && o_full |-> ##1 wr_ptr == $past(wr_ptr);
 endproperty
 assert property (dont_write_if_full);
 
// Test case 4 
 property dont_read_if_empty;
 @(posedge i_clk) disable iff(!i_rst_n) rd_en && o_empty |-> ##1 $stable(rd_ptr);
 endproperty
 assert property (dont_read_if_empty);
 
// Test case 5 
 property inc_wr_one;
 @(posedge i_clk) disable iff(!i_rst_n) wr_en && !o_full |-> ##1 (wr_ptr - 1'b1 == $past(wr_ptr));
 endproperty
 assert property (inc_wr_one);
 
// Test case 6 
 property inc_rd_one;
 @(posedge i_clk) disable iff(!i_rst_n) rd_en && !o_empty |-> ##1 (rd_ptr - 1'b1 == $past(rd_ptr));
 endproperty
 assert property (inc_rd_one);

 // Create the clock cycle after 5ms
initial begin
  forever begin
    #5 CLOCK_50 = ~CLOCK_50;
  end
end 
 
initial begin
	forever begin
     #10 i_data = $random;
	end
end

initial begin
	forever begin
	 KEY[0] = #5 1'b0;
	 KEY[0] = #5 1'b1;
	 
    KEY[1] = #5 1'b0;
	 KEY[1] = #5 1'b1;
	end
end
  // Test stimulus


  initial begin
    // Initialize inputs
    SW = 0;
    KEY = 3'b111;
	 CLOCK_50 = 0;
	 
    KEY[2] = #5 1'b0;
	 KEY[2] = #5 1'b1;
	 

    // Apply stimulus
	
    // Wait for simulation to finish
    #1000;
    $finish;
  end

endmodule
